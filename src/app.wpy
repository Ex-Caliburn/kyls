<style lang="less">
  @import "./styles/base";
  @import "./styles/icon";
  @import "./styles/style";

  .container {
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    box-sizing: border-box;
  }
</style>

<script>
  import wepy from 'wepy'
  import 'wepy-async-function'
  import { get, post } from './utils/service'
  import db from './utils/db'
  import { connect, setStore } from 'wepy-redux'
  import configStore from './store'

  import { TOKEN, USER_INFO } from './utils/constant'

  console.log(post)

  const store = configStore()
  setStore(store)

  @connect({
    num (state) {
      return state.counter.num
    },
    asyncNum (state) {
      return state.counter.asyncNum
    },
    sumNum (state) {
      return state.counter.num + state.counter.asyncNum
    }
  })

  export default class extends wepy.app {
    config = {
      pages: [
        'pages/index',
        'pages/info'
      ],
      window: {
        navigationBarBackgroundColor: '#ffffff',
        navigationBarTextStyle: 'black',
        navigationBarTitleText: 'kyls',
        backgroundColor: '#dddddd'
      }
      // tabBar: {
      //   selectedColor: '#f06292',
      //   color: '#707070',
      //   list: [{
      //     pagePath: 'pages/index',
      //     text: '首页',
      //     iconPath: 'icon/home.png',
      //     selectedIconPath: 'icon/home@select.png'
      //   },
      //   {
      //     pagePath: 'pages/info',
      //     text: '个人中心',
      //     iconPath: 'icon/user.png',
      //     selectedIconPath: 'icon/user@select.png'
      //   }
      //   ]
      // }
    }

    globalData = {
      userInfo: null,
      token: '',
      tabbar: {
        color: '#707070',
        selectedColor: '#f06292',
        backgroundColor: '#ffffff',
        borderStyle: '#eee',
        position: 'bottom',
        list: [
          {
            pagePath: '/pages/index',
            text: '首页',
            iconPath: '/icon/home.png',
            selectedIconPath: '/icon/home@select.png',
            selected: true
          },
          {
            pagePath: '/pages/info',
            text: '个人中心',
            iconPath: '/icon/user.png',
            selectedIconPath: '/icon/user@select.png',
            selected: false
          }
        ]
      }
    }

    constructor () {
      super()
      this.use('requestfix')
      this.use('promisify')
      // 拦截request请求
      // this.intercept('request', {
      //   // 发出请求时的回调函数
      //   config (p) {
      //     // p.header.token = +new Date()
      //     // 对所有request请求中的OBJECT参数对象统一附加时间戳属性
      //     console.log('config request: ', p)
      //     // 必须返回OBJECT参数对象，否则无法发送请求到服务端
      //     return p
      //   },
      //
      //   // // 请求成功后的回调函数
      //   // success (p) {
      //   //   if (p.statusCode === 200) {
      //   //     // 可以在这里对收到的响应数据对象进行加工处理
      //   //     console.log('request success: ', p)
      //   //     // 必须返回响应数据对象，否则后续无法对响应数据进行处理
      //   //     return p
      //   //   } else {
      //   //     console.log(p.statusCode)
      //   //     return false
      //   //   }
      //   // },
      //   //
      //   // // 请求失败后的回调函数
      //   // fail (p) {
      //   //   console.log('request fail: ', p)
      //   //   // 必须返回响应数据对象，否则后续无法对响应数据进行处理
      //   //   return p
      //   // },
      //
      //   // 请求完成时的回调函数(请求成功或失败都会被执行)
      //   complete (p) {
      //     // 隐藏加载提示
      //     wepy.hideNavigationBarLoading()
      //     // 停止下拉状态
      //     wepy.stopPullDownRefresh()
      //     console.log('request complete: ', p)
      //   }
      // })
    }

    onShow () {
      // const updateManager = wepy.getUpdateManager && wepy.getUpdateManager()
      // updateManager.onCheckForUpdate(function(res) {
      //   // 请求完新版本信息的回调
      //   console.log(res.hasUpdate)
      // })
      // updateManager.onUpdateReady(function() {
      //   wepy.showModal({
      //     title: '更新提示',
      //     content: '新版本已经准备好，请重启应用',
      //     showCancel: false,
      //     success: function(res) {
      //       // 新的版本已经下载好，调用 applyUpdate 应用新版本并重启
      //       updateManager.applyUpdate()
      //     }
      //   })
      // })
      // updateManager.onUpdateFailed(function() {
      //   // 新的版本下载失败
      //   console.log('新版本下载失败！')
      // })
    }

    onLaunch () {
      this.getToken()

      // try {
      //   wepy.getSetting()
      //     .then(res => {
      //       if (!res.authSetting['scope.userInfo']) {
      //         wepy.authorize({ scope: 'scope.userInfo' })
      //       }
      //     }, err => {
      //       console.log(2, err)
      //     }).catch(err => {
      //       console.log(3, err)
      //     })
      // } catch (err) {
      //   console.log(4, err)
      // }
    }

    async _getScienceInfoByType () {
      let getScienceInfoByType = await get({
        apiName: 'getScienceInfoByType',
        data: {
          science_type: 1
        }
      })
      console.log(getScienceInfoByType)
    }

    async _login () {
      let res = await wepy.login({ timeout: 30000 })
      this.globalData.code = res.code
      // code用户登录凭证（有效期五分钟）
      let wxUserInfo = await wepy.getUserInfo({ withCredentials: true })
      console.log(wxUserInfo)
      db.set(USER_INFO, wxUserInfo.userInfo)
      this.globalData.userInfo = wxUserInfo.userInfo
      let thirdReturn = await post({
        apiName: 'login',
        data: {
          code: res.code,
          iv: wxUserInfo.iv,
          encryptedData: wxUserInfo.encryptedData,
          decrypt_type: 'user'
        }
      })
      // console.log(thirdReturn.data)
      this.globalData.userInfo = thirdReturn.data
      this._getScienceInfoByType()
    }

    async _getUserInfo () {
      this._getScienceInfoByType()
      // let res = await wepy.getUserInfo({withCredentials: true})
      // console.log(res)
      // this.globalData.userInfo = res.userInfo
      // let thirdReturn = await post({
      //   apiName: 'login',
      //   data: {
      //     code: this.globalData.code,
      //     iv: res.iv,
      //     encryptedData: res.encryptedData,
      //     decrypt_type: 'user'
      //   }
      // })
      // console.log(thirdReturn)
    }

    // 微信登录
    async getToken () {
      let token = db.get(TOKEN)
      if (!token) {
        console.log(1)
        this._login()
      } else {
        wepy.checkSession()
          .then(res => {
            this.globalData.token = token
            this._getUserInfo()
          }, err => {
            console.log('checkSession err', err)
            console.log(2)
            this._login()
          })
          .catch(err => {
            console.log('checkSession err', err)
            console.log(3)
            this._login()
          })
      }
    }

    onShareAppMessage (options) {
      return {
        title: 'kyls'
      }
    }
  }
</script>
