<style lang="less">
  .pic{
    display: inline-block;
    width: 79px;
    height: 79px;
    margin:5rpx 4px 0 0;
  }
  .question,.answer{
    background-color: #fff;
    padding: 10rpx 20rpx 20rpx;
    margin-bottom: 20rpx;
    border-radius: 10rpx;
    box-shadow: 0px 10px 10px 0px rgba(0, 0, 0, 0.14), 0px 4px 2px 0px rgba(0, 0, 0, 0.04);
    .title{
      margin-bottom: 20rpx;
    }
    .content{
      margin-bottom: 20rpx;
      text-align:justify;
    }
    .time{
      margin-top: 10rpx;
      /*text-align: right;*/
    }
  }

  .answer-btn{
    /*font-weight: bold;*/
    font-size: 30rpx;
    /*color: red;*/
    text-align: right;
    margin: 0 auto;
  }
  .more{
    float: right;
  }
  .hideMsg{
    height: 140rpx;
    overflow: hidden;
  }
  .clamp{
    overflow : hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
  }
</style>

<template>
  <view class="page">
    <view class="page__bd">
      <view class="question">
        <view class="title fz30 flex flex-between">
          <view class="bold">{{questionerName}}</view>
          <!--<view class="blue">￥{{cost}}</view>-->
          <image @tap="focus" hidden="{{!isPostgraduate}}" class="love ML20 MR20" src="{{icon}}"></image>
        </view>
        <view class="{{showMore ? '' : 'hideMsg'}}">
          <view class="content fz32 tr">
            <text class="{{showMore ? '' : 'clamp'}}">{{questionContent}}</text>
            <text class="blue tr more" @tap="showMore" hidden="{{showMore}}">展开更多</text>
          </view>
          <view class="pic-wrap flex flex-wrap" hidden="{{!showMore}}">
            <block wx:for-items="{{questionPic}}" wx:for-index="index" wx:for-item="item" wx:key="id">
              <image @tap="previewImage({{item}},{{0}})" id="{{}}" class="pic" src="{{item}}" mode="aspectFill" alt=""/>
            </block>
          </view>
        </view>
        <view class="time fz24">{{time}}</view>
        <navigator hidden="{{!isPostgraduate || answerContent}}" class="answer-btn fz24" url="/pages/answerEdit?questionId={{questionId}}" hover-class="weui-cell_active">
          回答
        </navigator>
      </view>

      <view class="answer" hidden="{{!answerContent}}">
        <view class="title fz30 flex flex-between" >
          <view class="bold">{{answerName}}</view>
          <view @tap="edit" hidden="{{!isPostgraduate || !answerContent}}"  hover-class="weui-cell_active">
            编辑
          </view>
          <view hidden="{{isPostgraduate}}" class="flex">
            <!--<navigator url="/pages/questionFrom?id={{answererId}}" hover-class="weui-cell_active">-->
              <!--提问-->
            <!--</navigator>-->
            <image @tap="love"  class="love ML20 MR20" src="{{icon}}"></image>

            <navigator url="/pages/my/feedbackEdit?id={{answererId}}" hover-class="weui-cell_active">
              投诉
            </navigator>
          </view>
        </view>
        <view class="content fz32"> {{answerContent}}</view>
        <view class="pic-wrap flex flex-wrap">
          <block wx:for-items="{{answerPic}}" wx:for-index="index" wx:for-item="item" wx:key="id">
            <image @tap="previewImage({{item}},{{1}})" class="pic" src="{{item}}" mode="aspectFill" alt=""/>
          </block>
        </view>
        <view class="time fz24">{{time}}</view>
      </view>

    </view>
  </view>
  <tabbar :tabbar.sync='tabbar'></tabbar>
</template>


<script>
  import wepy from 'wepy'
  import Tabbar from '@/components/tabbar' // alias example
  import Toast from 'wepy-com-toast'
  import { formatDate, formatPng } from 'utils/common'
  // import toast from 'mixins/toast'
  import tabbar from 'mixins/tabbar'
  import navigate from 'mixins/navigate'
  import { get } from 'utils/service'
  import { LOVE, UNLOVE } from 'utils/constant'
  // import db from 'utils/db'
  // import { IS_POSTGRADUATE } from 'utils/constant'

  export default class chat extends wepy.page {
    config = {
      navigationBarTitleText: '问与答'
    }
    components = {
      tabbar: Tabbar,
      toast: Toast
    }

    mixins = [tabbar, navigate]

    data = {
      showMore: false,
      icon: UNLOVE,
      isPostgraduate: '',
      loveStatus: false, // 本科生是否对研究生点赞
      focusStatus: false, // 研究生是否对本科生关注
      cost: 10,
      questionId: '', // 提问id
      questionerId: '', // 提问者id
      questionerName: '', // 提答者姓名
      questionPic: [],
      questionContent: '',
      answerId: '', // 回答id
      answererId: '', // 回答者id
      answerName: '', // 回答者姓名
      answerPic: [],
      answerContent: ''
    }

    methods = {
      showMore () {
        this.showMore = true
      },
      love () {
        if (this.loveStatus) {
          this.icon = UNLOVE
          this.undergraduatePraise()
        } else {
          this.icon = LOVE
          this.undergraduatePraise()
        }
        this.loveStatus = !this.loveStatus
        this.$apply()
      },
      focus () {
        if (this.focusStatus) {
          this.icon = UNLOVE
          this.postgraduatePraise()
        } else {
          this.icon = LOVE
          this.postgraduatePraise()
        }
        this.focusStatus = !this.focusStatus
        this.$apply()
      },
      edit () {
        this.$parent.globalData.editInfo = {
          answerContent: this.answerContent,
          answerPictures: this.answerPic
        }
        this.$apply()
        this.navigate('answerEdit?answerId=' + this.answerId)
      },
      continueAsk () {
        this.navigate('questionFrom?id=' + this.answerUserId)
      },
      previewImage(img, i) {
        let urls
        if (i === 1) {
          urls = this.answerPic
        } else {
          urls = this.questionPic
        }
        wepy.previewImage({
          current: img, // 当前显示图片的http链接
          urls: urls // 需要预览的图片http链接列表
        })
      }
    }
    viewQuestion (questionId) {
      get({
        apiName: 'viewQuestion',
        data: {
          questionId
        }})
        .then((res) => {
          this.cost = res.cost
          this.questionerId = res.questionerId || ''
          this.questionerName = res.questionerName || ''
          this.answererId = res.answererId || ''
          this.answerName = res.answerName || ''
          this.questionContent = res.questionContent || ''
          let questionPic = res.questionPic ? res.questionPic.split(',') : []
          let answerPic = res.answerPic ? res.answerPic.split(',') : []
          questionPic = questionPic.map((item) => formatPng(item))
          answerPic = answerPic.map((item) => formatPng(item))
          this.questionPic = questionPic
          this.answerPic = answerPic

          this.questionContent = res.questionContent || ''
          this.answerId = res.answerId || ''
          this.answerContent = res.answerContent || ''
          this.time = formatDate(new Date(res.createdAt))
          this.$apply()
        }).catch(err => {
          console.log(err)
        })
    }

    undergraduatePraise () {
      get({
        apiName: 'undergraduatePraise',
        data: {
          pg_user_id: this.answererId
        }})
        .then((res) => {
        }).catch(err => {
          console.log(err)
        })
    }
    postgraduatePraise () {
      post({
        apiName: 'postgraduateAttention',
        data: {
          under_user_id: this.questionerId
        }})
        .then((res) => {
        }).catch(err => {
          console.log(err)
        })
    }

    onLoad(params) {
      console.log(params)
      this.isPostgraduate = this.$parent.globalData.isPostgraduate
      if (params.questionId) {
        this.questionId = params.questionId
        this.viewQuestion(params.questionId)
      }
      this.$apply()
    }
  }
</script>
