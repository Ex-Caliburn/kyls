<style>
  /* pages/wx-cropper/index.wxss */
  .wx-content-info {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #000;
  }

  .wx-corpper {
    position: absolute;
    top: 100rpx;
    overflow: hidden;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    -webkit-tap-highlight-color: transparent;
    -webkit-touch-callout: none;
    box-sizing: border-box;
  }

  .wx-corpper-content {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }

  .wx-corpper-content image {
    display: block;
    width: 100%;
    min-width: 0 !important;
    max-width: none !important;
    height: 100%;
    min-height: 0 !important;
    max-height: none !important;
    image-orientation: 0deg !important;
    margin: 0 auto;
  }

  /* 移动图片效果 */
  .wx-cropper-drag-box {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    cursor: move;
    background: rgba(0, 0, 0, 0.6);
    z-index: 1;
  }

  /* 内部的信息 */
  .wx-corpper-crop-box {
    position: absolute;
    width: 500rpx;
    height: 500rpx;
    background: rgba(255, 255, 255, 0.3);
    z-index: 2;
  }

  .wx-corpper-crop-box .wx-cropper-view-box {
    position: relative;
    display: block;
    width: 100%;
    height: 100%;
    overflow: visible;
    outline: 1px solid #69f;
    outline-color: rgba(102, 153, 255, .75)
  }

  /* 横向虚线 */
  .wx-cropper-dashed-h {
    position: absolute;
    top: 33.33333333%;
    left: 0;
    width: 100%;
    height: 33.33333333%;
    border-top: 1px dashed rgba(255, 255, 255, 0.5);
    border-bottom: 1px dashed rgba(255, 255, 255, 0.5);
  }

  /* 纵向虚线 */
  .wx-cropper-dashed-v {
    position: absolute;
    left: 33.33333333%;
    top: 0;
    width: 33.33333333%;
    height: 100%;
    border-left: 1px dashed rgba(255, 255, 255, 0.5);
    border-right: 1px dashed rgba(255, 255, 255, 0.5);
  }

  /* 四个方向的线  为了之后的拖动事件*/
  .wx-cropper-line-t {
    position: absolute;
    display: block;
    width: 100%;
    background-color: #69f;
    top: 0;
    left: 0;
    height: 1px;
    opacity: 0.1;
    cursor: n-resize;
  }

  .wx-cropper-line-t::before {
    content: '';
    position: absolute;
    top: 50%;
    right: 0rpx;
    width: 100%;
    -webkit-transform: translate3d(0, -50%, 0);
    transform: translate3d(0, -50%, 0);
    bottom: 0;
    height: 41rpx;
    background: transparent;
    z-index: 11;
  }

  .wx-cropper-line-r {
    position: absolute;
    display: block;
    background-color: #69f;
    top: 0;
    right: 0px;
    width: 1px;
    opacity: 0.1;
    height: 100%;
    cursor: e-resize;
  }

  .wx-cropper-line-r::before {
    content: '';
    position: absolute;
    top: 0;
    left: 50%;
    width: 41rpx;
    -webkit-transform: translate3d(-50%, 0, 0);
    transform: translate3d(-50%, 0, 0);
    bottom: 0;
    height: 100%;
    background: transparent;
    z-index: 11;
  }

  .wx-cropper-line-b {
    position: absolute;
    display: block;
    width: 100%;
    background-color: #69f;
    bottom: 0;
    left: 0;
    height: 1px;
    opacity: 0.1;
    cursor: s-resize;
  }

  .wx-cropper-line-b::before {
    content: '';
    position: absolute;
    top: 50%;
    right: 0rpx;
    width: 100%;
    -webkit-transform: translate3d(0, -50%, 0);
    transform: translate3d(0, -50%, 0);
    bottom: 0;
    height: 41rpx;
    background: transparent;
    z-index: 11;
  }

  .wx-cropper-line-l {
    position: absolute;
    display: block;
    background-color: #69f;
    top: 0;
    left: 0;
    width: 1px;
    opacity: 0.1;
    height: 100%;
    cursor: w-resize;
  }

  .wx-cropper-line-l::before {
    content: '';
    position: absolute;
    top: 0;
    left: 50%;
    width: 41rpx;
    -webkit-transform: translate3d(-50%, 0, 0);
    transform: translate3d(-50%, 0, 0);
    bottom: 0;
    height: 100%;
    background: transparent;
    z-index: 11;
  }

  .wx-cropper-point {
    width: 5px;
    height: 5px;
    background-color: #69f;
    opacity: .75;
    position: absolute;
    z-index: 3;
  }

  .point-t {
    top: -3px;
    left: 50%;
    margin-left: -3px;
    cursor: n-resize;
  }

  .point-tr {
    top: -3px;
    left: 100%;
    margin-left: -3px;
    cursor: n-resize;
  }

  .point-r {
    top: 50%;
    left: 100%;
    margin-left: -3px;
    margin-top: -3px;
    cursor: n-resize;
  }

  .point-rb {
    left: 100%;
    top: 100%;
    -webkit-transform: translate3d(-50%, -50%, 0);
    transform: translate3d(-50%, -50%, 0);
    cursor: n-resize;
    width: 24rpx;
    height: 24rpx;
    background-color: #69f;
    position: absolute;
    z-index: 1112;
    opacity: 1;
  }

  .point-b {
    left: 50%;
    top: 100%;
    margin-left: -3px;
    margin-top: -3px;
    cursor: n-resize;
  }

  .point-bl {
    left: 0%;
    top: 100%;
    margin-left: -3px;
    margin-top: -3px;
    cursor: n-resize;
  }

  .point-l {
    left: 0%;
    top: 50%;
    margin-left: -3px;
    margin-top: -3px;
    cursor: n-resize;
  }

  .point-lt {
    left: 0%;
    top: 0%;
    margin-left: -3px;
    margin-top: -3px;
    cursor: n-resize;
  }

  /* 裁剪框预览内容 */
  .wx-cropper-viewer {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .wx-cropper-viewer image {
    position: absolute;
    z-index: 2;
  }
  .avatar {
    border-radius: 50%;
  }
</style>

<template>
  <view class="page" hidden="{{imageSrc}}">
    <view class="page__bd">
      <view class="weui-cells weui-cells_after-title">
        <view @tap="getImage" class="weui-cell weui-cell_access" hover-class="weui-cell_active">
          <view class="weui-cell__hd">
            <image src="{{avatarUrl}}" class="avatar"
                   style="margin-right: 5px;vertical-align: middle;width:20px; height: 20px;"></image>
          </view>
          <view class="weui-cell__bd"></view>
          <view class="weui-cell__ft weui-cell__ft_in-access">修改</view>
        </view>
        <view class="weui-cell weui-cell_input">
          <view class="weui-cell__hd">
            <view class="weui-label">邮箱</view>
          </view>
          <view class="weui-cell__bd">
            <input class="weui-input" placeholder="请输入邮箱"  @change="emailInp" value="{{email}}"/>
          </view>
        </view>
        <view hidden="{{isPostgraduate}}" class="weui-cell weui-cell_input">
          <view class="weui-cell__hd">
            <view class="weui-label">意向院校</view>
          </view>
          <view class="weui-cell__bd">
            <input class="weui-input" placeholder="意向院校" @change="volunteerSchoolInp" value="{{volunteerSchool}}"/>
          </view>
        </view>

        <view hidden="{{isPostgraduate}}" class="weui-cell weui-cell_input">
          <view class="weui-cell__hd">
            <view class="weui-label">意向专业</view>
          </view>
          <view class="weui-cell__bd">
            <input class="weui-input" placeholder="意向专业" @change="volunteerMajorInp" value="{{volunteerMajor}}"/>
          </view>
        </view>
        <view hidden="{{!isPostgraduate}}" class="weui-cell weui-cell_switch">
          <view class="weui-cell__bd">回答意愿</view>
          <view class="weui-cell__ft">
            <switch @change="switchChange" checked="{{answerWill}}"></switch>
          </view>
        </view>
      </view>
    </view>
  </view>
  <button @tap="updateInfo" class="weui-btn mini-btn type_yellow fz26">确认修改</button>

  <view class="wx-content-info" wx:if="{{imageSrc}}">
    <view wx:if="{{isShowImg}}" class="wx-corpper"
          style="width:{{cropperInitW}}rpx;height:{{cropperInitH}}rpx;background:#000">
      <view class="wx-corpper-content"
            style="width:{{cropperW}}rpx;height:{{cropperH}}rpx;left:{{cropperL}}rpx;top:{{cropperT}}rpx">
        <image src="{{imageSrc}}" style="width:{{cropperW}}rpx;height:{{cropperH}}rpx"></image>
        <view class="wx-corpper-crop-box" bindtouchstart="contentStartMove" bindtouchmove="contentMoveing"
              style="width:{{cutW}}rpx;height:{{cutH}}rpx;left:{{cutL}}rpx;top:{{cutT}}rpx">
          <view class="wx-cropper-view-box">
            <!-- <view class="wx-cropper-viewer">
              <image src="{{imageSrc}}" style="width:{{cropperW}}rpx;height:{{cropperH}}rpx;left:{{cropperL - cutL}}rpx;top:{{cropperT - cutT}}rpx"></image>
            </view> -->
            <view class="wx-cropper-dashed-h"></view>
            <view class="wx-cropper-dashed-v"></view>
            <view class="wx-cropper-line-t" data-drag="top" catchtouchstart="dragStart"
                  catchtouchmove="dragMove"></view>
            <view class="wx-cropper-line-r" data-drag="right" catchtouchstart="dragStart"
                  catchtouchmove="dragMove"></view>
            <view class="wx-cropper-line-b" data-drag="bottom" catchtouchstart="dragStart"
                  catchtouchmove="dragMove"></view>
            <view class="wx-cropper-line-l" data-drag="left" catchtouchstart="dragStart"
                  catchtouchmove="dragMove"></view>
            <view class="wx-cropper-point point-t" data-drag="top" catchtouchstart="dragStart"
                  catchtouchmove="dragMove"></view>
            <view class="wx-cropper-point point-tr" data-drag="topTight"></view>
            <view class="wx-cropper-point point-r" data-drag="right" catchtouchstart="dragStart"
                  catchtouchmove="dragMove"></view>
            <view class="wx-cropper-point point-rb" data-drag="rightBottom" catchtouchstart="dragStart"
                  catchtouchmove="dragMove"></view>
            <view class="wx-cropper-point point-b" data-drag="bottom" catchtouchstart="dragStart"
                  catchtouchmove="dragMove"></view>
            <view class="wx-cropper-point point-bl" data-drag="bottomLeft"></view>
            <view class="wx-cropper-point point-l" data-drag="left" catchtouchstart="dragStart"
                  catchtouchmove="dragMove"></view>
            <view class="wx-cropper-point point-lt" data-drag="leftTop"></view>
          </view>
        </view>
      </view>
      <!-- <view class="wx-cropper-drag-box"></view> -->
    </view>
    <canvas canvas-id="myCanvas"
            style="position:absolute;border: 1px solid red; width:{{qualityWidth}}px;height:{{qualityWidth/innerAspectRadio}}px;top:-9999px;left:-9999px;"></canvas>
    <button type="primary" bindtap="getImageInfo"
            style="position:fixed;bottom:120rpx;width:30%;left:20%;transform:translate3d(-50%,0,0)"> 确定
    </button>

    <button type="primary" bindtap="getImage"
            style="position:fixed;bottom:120rpx;width:30%;left:60%;transform:translate3d(-50%,0,0)"> 选择图片
    </button>

    <image src="{{returnImage}}"></image>
  </view>
</template>


<script>
  import wepy from 'wepy'
  import Tabbar from '@/components/tabbar' // alias example
  import Toast from 'wepy-com-toast'
  import toast from 'mixins/toast'
  import tabbar from 'mixins/tabbar'
  import { picturePrefix } from 'utils/config'
  import { post, uploadPics } from 'utils/service'
  import db from 'utils/db'
  import { EMAIL_RULE, USER_INFO } from 'utils/constant'

  // 手机的宽度
  var windowWRPX = 750
  // 拖动时候的 pageX
  var pageX = 0
  // 拖动时候的 pageY
  var pageY = 0
  var pixelRatio = wepy.getSystemInfoSync().pixelRatio
  // 调整大小时候的 pageX
  var sizeConfPageX = 0
  // 调整大小时候的 pageY
  var sizeConfPageY = 0

  var initDragCutW = 0
  var initDragCutL = 0
  var initDragCutH = 0
  var initDragCutT = 0
  var qualityWidth = 1080
  var innerAspectRadio = 1
  // 移动时 手势位移与 实际元素位移的比
  var dragScaleP = 2

  export default class cropper extends wepy.page {
    config = {
      navigationBarTitleText: 'test'
    }
    components = {
      tabbar: Tabbar,
      toast: Toast
    }

    mixins = [tabbar, toast]

    data = {
      answerWill: '',
      isPostgraduate: '',
      volunteerMajor: '',
      volunteerSchool: '',
      email: '',
      avatarUrl: '',
      imageSrc: '',
      returnImage: '',
      isShowImg: false,
      // 初始化的宽高
      cropperInitW: windowWRPX,
      cropperInitH: windowWRPX,
      // 动态的宽高
      cropperW: windowWRPX,
      cropperH: windowWRPX,
      // 动态的left top值
      cropperL: 0,
      cropperT: 0,

      // 图片缩放值
      scaleP: 0,
      imageW: 0,
      imageH: 0,

      // 裁剪框 宽高
      cutW: 0,
      cutH: 0,
      cutL: 0,
      cutT: 0,
      qualityWidth: qualityWidth,
      innerAspectRadio: innerAspectRadio
    }

    methods = {
      updateInfo () {
        this._updateInfo()
      },
      switchChange (e) {
        this.answerWill = e.detail.value
      },
      emailInp (e) {
        this.email = e.detail.value
      },
      volunteerMajorInp (e) {
        this.volunteerMajor = e.detail.value
      },
      volunteerSchoolInp (e) {
        this.volunteerSchool = e.detail.value
      }
    }

    _updateInfo() {
      let { volunteerMajor, volunteerSchool, email, avatarUrl, answerWill } = this
      answerWill = answerWill ? '1' : '0'
      if (!email || !EMAIL_RULE.test(email)) {
        let errMsg = '请输入正确的邮箱'
        this.ShowToast(errMsg)
      }
      post({
        apiName: 'updateUserInfo',
        data: { volunteerMajor, volunteerSchool, email, avatarUrl, answerWill }
      }).then((res) => {
        let userInfo = this.$parent.globalData.userInfo
        if (userInfo.avatarUrl !== avatarUrl) {
          userInfo.avatarUrl = picturePrefix + avatarUrl
          db.set(USER_INFO, userInfo)
        }
      }).catch(err => {
        console.log(err)
      })
    }

    onLoad (params) {
      this.isPostgraduate = this.$parent.globalData.isPostgraduate
      this.avatarUrl = this.$parent.globalData.userInfo.avatarUrl
      this.$apply()
    }

    getImage () {
      var _this = this
      wepy.chooseImage({
        count: 1
      }).then(res => {
        _this.imageSrc = res.tempFilePaths[0]
        this.$apply()
        _this.loadImage()
      }).catch(err => {
        console.log(err)
      })
    }

    loadImage () {
      var _this = this
      wepy.showLoading({
        title: '图片加载中...'
      })

      wepy.getImageInfo({
        src: _this.imageSrc
      }).then((res) => {
        innerAspectRadio = res.width / res.height
        // 根据图片的宽高显示不同的效果   保证图片可以正常显示
        if (innerAspectRadio >= 1) {
          _this.cropperW = windowWRPX
          _this.cropperH = windowWRPX / innerAspectRadio
          // 初始化left right
          _this.cropperL = Math.ceil((windowWRPX - windowWRPX) / 2)
          _this.cropperT = Math.ceil((windowWRPX - windowWRPX / innerAspectRadio) / 2)
          // 裁剪框  宽高
          _this.cutW = windowWRPX - 200
          _this.cutH = windowWRPX / innerAspectRadio - 200
          _this.cutL = Math.ceil((windowWRPX - windowWRPX + 200) / 2)
          _this.cutT = Math.ceil((windowWRPX / innerAspectRadio - (windowWRPX / innerAspectRadio - 200)) / 2)
          // 图片缩放值
          _this.scaleP = res.width * pixelRatio / windowWRPX
          // 图片原始宽度 rpx
          _this.imageW = res.width * pixelRatio
          _this.imageH = res.height * pixelRatio
          _this.innerAspectRadio = innerAspectRadio
        } else {
          _this.cropperW = windowWRPX * innerAspectRadio
          _this.cropperH = windowWRPX
          // 初始化left right
          _this.cropperL = Math.ceil((windowWRPX - windowWRPX * innerAspectRadio) / 2)
          _this.cropperT = Math.ceil((windowWRPX - windowWRPX) / 2)
          // 裁剪框的宽高
          _this.cutW = windowWRPX * innerAspectRadio - 50
          _this.cutH = 200
          _this.cutL = Math.ceil((windowWRPX * innerAspectRadio - (windowWRPX * innerAspectRadio - 50)) / 2)
          _this.cutT = Math.ceil((windowWRPX - 200) / 2)
          // 图片缩放值
          _this.scaleP = res.width * pixelRatio / windowWRPX
          // 图片原始宽度 rpx
          _this.imageW = res.width * pixelRatio
          _this.imageH = res.height * pixelRatio
          _this.innerAspectRadio = innerAspectRadio
        }
        _this.isShowImg = true
        this.$apply()
        wepy.hideLoading()
      })
    }

    // 拖动时候触发的touchStart事件
    contentStartMove (e) {
      pageX = e.touches[0].pageX
      pageY = e.touches[0].pageY
    }

    // 拖动时候触发的touchMove事件
    contentMoveing (e) {
      var _this = this
      // _this.cutL + (e.touches[0].pageX - pageX)
      // console.log(e.touches[0].pageX)
      // console.log(e.touches[0].pageX - pageX)
      var dragLengthX = (pageX - e.touches[0].pageX) * dragScaleP
      var dragLengthY = (pageY - e.touches[0].pageY) * dragScaleP
      var minX = Math.max(_this.cutL - (dragLengthX), 0)
      var minY = Math.max(_this.cutT - (dragLengthY), 0)
      var maxX = _this.cropperW - _this.cutW
      var maxY = _this.cropperH - _this.cutH
      _this.cutL = Math.min(maxX, minX)
      _this.cutT = Math.min(maxY, minY)
      this.$apply()
      console.log(`${maxX} ----- ${minX}`)
      pageX = e.touches[0].pageX
      pageY = e.touches[0].pageY
    }

    // 获取图片
    getImageInfo () {
      var _this = this

      wepy.showLoading({
        title: '图片生成中...'
      })
      // 将图片写入画布
      const ctx = wepy.createCanvasContext('myCanvas')
      ctx.drawImage(_this.imageSrc, 0, 0, qualityWidth, qualityWidth / innerAspectRadio)
      ctx.draw(true, () => {
        // 获取画布要裁剪的位置和宽度   均为百分比 * 画布中图片的宽度    保证了在微信小程序中裁剪的图片模糊  位置不对的问题 canvasT = (_this.cutT / _this.cropperH) * (_this.imageH / pixelRatio)
        var canvasW = (_this.cutW / _this.cropperW) * qualityWidth
        var canvasH = (_this.cutH / _this.cropperH) * qualityWidth / innerAspectRadio
        var canvasL = (_this.cutL / _this.cropperW) * qualityWidth
        var canvasT = (_this.cutT / _this.cropperH) * qualityWidth / innerAspectRadio
        console.log(`canvasW:${canvasW} --- canvasH: ${canvasH} --- canvasL: ${canvasL} --- canvasT: ${canvasT} -------- _this.imageW: ${_this.imageW}  ------- _this.imageH: ${_this.imageH} ---- pixelRatio ${pixelRatio}`)
        wepy.canvasToTempFilePath({
          x: canvasL,
          y: canvasT,
          width: canvasW,
          height: canvasH,
          destWidth: canvasW,
          destHeight: canvasH,
          quality: 0.5,
          canvasId: 'myCanvas'
        }).then(res => {
          wepy.hideLoading()
          // 成功获得地址的地方
          console.log(res.tempFilePath)
          _this.uploadPic(res.tempFilePath)
          // wepy.previewImage({
          //   current: '', // 当前显示图片的http链接
          //   urls: [res.tempFilePath] // 需要预览的图片http链接列表
          // })
        })
      })
    }

    uploadPic (FilePath) {
      let that = this
      // let userInfo = this.$parent.globalData.userInfo
      function success (imgUrl) {
        that.avatarUrl = picturePrefix + imgUrl
        that.imageSrc = ''
        // userInfo.avatarUrl = picturePrefix + imgUrl
        // db.set(USER_INFO, userInfo)
          // todo 更新头像
        that.$apply()
      }
      function fail (err) {
        console.log(err)
      }
      uploadPics(FilePath, success, fail)
    }

    // 设置大小的时候触发的touchStart事件
    dragStart (e) {
      var _this = this
      sizeConfPageX = e.touches[0].pageX
      sizeConfPageY = e.touches[0].pageY
      initDragCutW = _this.cutW
      initDragCutL = _this.cutL
      initDragCutT = _this.cutT
      initDragCutH = _this.cutH
    }

    // 设置大小的时候触发的touchMove事件
    dragMove (e) {
      var _this = this
      var dragType = e.target.dataset.drag
      let dragLength
      switch (dragType) {
        case 'right':
          dragLength = (sizeConfPageX - e.touches[0].pageX) * dragScaleP
          if (initDragCutW >= dragLength) {
            // 如果 移动小于0 说明是在往下啦  放大裁剪的高度  这样一来 图片的高度  最大 等于 图片的top值加 当前图片的高度  否则就说明超出界限
            if (dragLength < 0 && _this.cropperW > initDragCutL + _this.cutW) {
              _this.cutW = initDragCutW - dragLength
            }
            // 如果是移动 大于0  说明在缩小  只需要缩小的距离小于原本裁剪的高度就ok
            if (dragLength > 0) {
              _this.cutW = initDragCutW - dragLength
            }
          }
          break
        case 'left':
          dragLength = (dragLength = sizeConfPageX - e.touches[0].pageX) * dragScaleP
          console.log(dragLength)
          if (initDragCutW >= dragLength && initDragCutL > dragLength) {
            if (dragLength < 0 && Math.abs(dragLength) >= initDragCutW) return
            _this.cutL = initDragCutL - dragLength
            _this.cutW = initDragCutW + dragLength
          }
          break
        case 'top':
          dragLength = (sizeConfPageY - e.touches[0].pageY) * dragScaleP
          if (initDragCutH >= dragLength && initDragCutT > dragLength) {
            if (dragLength < 0 && Math.abs(dragLength) >= initDragCutH) return
            _this.cutT = initDragCutT - dragLength
            _this.cutH = initDragCutH + dragLength
          }
          break
        case 'bottom':
          dragLength = (sizeConfPageY - e.touches[0].pageY) * dragScaleP
          // console.log(_this.cropperH > _this.cutT + _this.cutH)
          console.log(dragLength)
          console.log(initDragCutH >= dragLength)
          console.log(_this.cropperH > initDragCutT + _this.cutH)
          // 必须是 dragLength 向上缩小的时候必须小于原本的高度
          if (initDragCutH >= dragLength) {
            // 如果 移动小于0 说明是在往下啦  放大裁剪的高度  这样一来 图片的高度  最大 等于 图片的top值加 当前图片的高度  否则就说明超出界限
            if (dragLength < 0 && _this.cropperH > initDragCutT + _this.cutH) {
              _this.cutH = initDragCutH - dragLength
            }
            // 如果是移动 大于0  说明在缩小  只需要缩小的距离小于原本裁剪的高度就ok
            if (dragLength > 0) {
              _this.cutH = initDragCutH - dragLength
            }
          }
          break
        case 'rightBottom':
          var dragLengthX = (sizeConfPageX - e.touches[0].pageX) * dragScaleP
          var dragLengthY = (sizeConfPageY - e.touches[0].pageY) * dragScaleP
          if (initDragCutH >= dragLengthY && initDragCutW >= dragLengthX) {
            // bottom 方向的变化
            if ((dragLengthY < 0 && _this.cropperH > initDragCutT + _this.cutH) || (dragLengthY > 0)) {
              _this.cutH = initDragCutH - dragLengthY
            }

            // right 方向的变化
            if ((dragLengthX < 0 && _this.cropperW > initDragCutL + _this.cutW) || (dragLengthX > 0)) {
              _this.cutW = initDragCutW - dragLengthX
            }
          }
          break
        default:
          break
      }
      this.$apply()
    }
  }
</script>
